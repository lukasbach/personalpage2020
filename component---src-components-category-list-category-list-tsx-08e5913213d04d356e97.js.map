{"version":3,"sources":["webpack:///./src/components/CategoryList/CategoryList.tsx","webpack:///./src/components/Layout/PaddedContent.tsx","webpack:///./src/components/Header/Header.tsx","webpack:///./src/components/FrontMatterImage.tsx"],"names":["CategoryList","props","pageContext","categories","key","title","pages","className","map","category","filter","page","to","slug","image","iconMonochromatic","icon","height","icoSize","description","tags","split","tag","name","PaddedContent","children","Header","useState","isHoveringTitle","setIsHoveringTitle","mobileToggled","setMobileToggled","data","onMouseEnter","onMouseLeave","aria-label","onClick","aria-hidden","faBars","site","siteMetadata","namespaces","namespace","FrontMatterImage","find","ext","includes","src","width","alt","endsWith","size"],"mappings":"iPAoFeA,UAnDV,SAAAC,GAAS,MAC8BA,EAAMC,YAA5BC,GADR,EACJC,IADI,EACCC,MADD,EACQF,YAAYG,EADpB,EACoBA,MAEhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAeC,UAAU,oBAErBJ,EAAWK,KAAI,SAAAC,GAAQ,OACrB,oCACE,4BAAMA,EAASJ,OACf,wBAAIE,UAAU,iBAEVD,EAAMI,QAAO,qBAAGD,WAA8CA,EAASL,OAAKI,KAAI,SAACG,GAAD,aAC9E,kBAAC,OAAD,CAAMC,GAAID,EAAKE,MACb,4BACE,6BACE,kBAAC,IAAD,CAAkBC,MAAOH,EAAKI,mBAAqBJ,EAAKK,KAAMC,OAAQ,GAAIC,QAAQ,QAEpF,6BACE,4BAAMP,EAAKN,OACX,2BAAKM,EAAKQ,aACV,yBAAKZ,UAAU,WAAf,UAEII,EAAKS,YAFT,aAEI,EAAWC,MAAM,KAAKb,KAAI,SAAAc,GAAO,MACPA,EAAID,MAAM,KAA3BE,EADwB,KACfP,EADe,WAE/B,OACE,8BACIA,GAAQ,kBAAC,IAAD,CAAiBA,KAAMA,IAC/BO,kBAe9B,kBAAC,IAAD,U,8FC1EKC,G,UAA0C,SAAAvB,GACrD,OACE,uCAASA,EAAT,CAAgBM,WAAYN,EAAMM,WAAa,IAAM,YACjDN,EAAMwB,a,oWCCDC,EAAmB,SAAAzB,GAAS,MACO0B,oBAAS,GAAhDC,EADgC,KACfC,EADe,OAEGF,oBAAS,GAA5CG,EAFgC,KAEjBC,EAFiB,KAIjCC,EAAO,OAab,OACE,0BAAQzB,UAAS,gBAAiBqB,GAAmB,SAApC,KAA+CE,GAAiB,mBAC/E,gBAAC,OAAD,CAAMlB,GAAG,KACP,uBACEqB,aAAc,kBAAMJ,GAAmB,IACvCK,aAAc,kBAAML,GAAmB,IACvCM,aAAW,kBAHb,QAKO,sCAIT,0BAAQ5B,UAAU,gBAAgB6B,QAAS,kBAAML,GAAkBD,IAAgBO,eAAa,GAC9F,gBAAC,IAAD,CAAiBrB,KAAMsB,OAGzB,2BACE,uBAAK/B,UAAU,aAEXyB,EAAKO,KAAKC,aAAaC,WAAWjC,KAAI,SAAAkC,GAAS,OAC7C,gBAAC,OAAD,CAAM9B,GAAE,IAAM8B,EAAUtC,KAClBsC,EAAUrC,e,kJC1CjBsC,EAMR,SAAA1C,GACH,OAAKA,EAAMa,MAIP,CAAC,OAAQ,OAAQ,OAAQ,QAAS,QAAQ8B,MAAK,SAAAC,GAAG,OAAI5C,EAAMa,MAAMgC,SAASD,MAE3E,uBAAKE,IAAK9C,EAAMa,MAAOkC,MAAO/C,EAAM+C,MAAO/B,OAAQhB,EAAMgB,OAAQgC,IAAKhD,EAAMgD,IAC1E1C,UAAWN,EAAMa,MAAMoC,SAAS,KAAO,YAAc,KAIvD,gBAAC,IAAD,CAAiBlC,KAAOf,EAAMa,MAAMO,MAAM,KAAc8B,KAAMlD,EAAMiB,QACnD8B,MAAO/C,EAAM+C,MAAO/B,OAAQhB,EAAMgB,SAX9C,O","file":"component---src-components-category-list-category-list-tsx-08e5913213d04d356e97.js","sourcesContent":["import React from 'react';\nimport { Header } from '../Header/Header';\n\nimport \"./categorylist.scss\";\nimport \"../Layout/layout.scss\";\nimport Layout from '../Layout/layout';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { PaddedContent } from '../Layout/PaddedContent';\nimport { FrontMatterImage } from '../FrontMatterImage';\nimport { Footer } from '../Footer';\n\nconst CategoryList: React.FC<{\n  pageContext: {\n    key: string,\n    title: string,\n    categories: Array<{\n      key: string,\n      title: string,\n      description: string,\n      icon: string;\n    }>,\n    pages: Array<{\n      slug: string,\n      title: string,\n      category: string,\n      icon: string,\n      iconMonochromatic: string,\n      description: string,\n      tags: string\n    }>\n  }\n}> = props => {\n  const { key, title, categories, pages } = props.pageContext\n\n  return (\n    <Layout>\n      <Header />\n\n      <PaddedContent className=\"footer-container\">\n        {\n          categories.map(category => (\n            <>\n              <h1>{ category.title }</h1>\n              <ul className=\"category-list\">\n                {\n                  pages.filter(({ category: pageCategory }) => pageCategory === category.key).map((page) => (\n                    <Link to={page.slug}>\n                      <li>\n                        <div>\n                          <FrontMatterImage image={page.iconMonochromatic || page.icon} height={48} icoSize=\"3x\" />\n                        </div>\n                        <div>\n                          <h2>{ page.title }</h2>\n                          <p>{ page.description }</p>\n                          <div className=\"taglist\">\n                            {\n                              page.tags?.split(',').map(tag => {\n                                const [name, ...icon] = tag.split('/')\n                                return (\n                                  <span>\n                                    { icon && <FontAwesomeIcon icon={icon as any} /> }\n                                    { name }\n                                  </span>\n                                )\n                              })\n                            }\n                          </div>\n                        </div>\n                      </li>\n                    </Link>\n                  ))\n                }\n              </ul>\n            </>\n          ))\n        }\n        <Footer />\n      </PaddedContent>\n    </Layout>\n  )\n}\n\nexport default CategoryList;\n","import * as React from 'react';\nimport \"./layout.scss\";\nimport { HTMLProps } from 'react';\n\nexport const PaddedContent: React.FC<HTMLProps<any>> = props => {\n  return (\n    <div {...props} className={(props.className || '') + \" padded\"}>\n      { props.children }\n    </div>\n  );\n};\n","import * as React from 'react';\n\nimport \"./header.scss\";\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\nexport const Header: React.FC = props => {\n  const [isHoveringTitle, setIsHoveringTitle] = useState(false);\n  const [mobileToggled, setMobileToggled] = useState(false);\n\n  const data = useStaticQuery(graphql`\n    query {\n      site(siteMetadata: {}) {\n        siteMetadata {\n          namespaces {\n            title\n            key\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <header className={`page-header ${isHoveringTitle && 'hover'} ${mobileToggled && 'mobile-toggled'}`}>\n      <Link to=\"/\">\n        <div\n          onMouseEnter={() => setIsHoveringTitle(true)}\n          onMouseLeave={() => setIsHoveringTitle(false)}\n          aria-label=\"Go to homepage\"\n        >\n          lukas<span>bach</span>\n        </div>\n      </Link>\n\n      <button className=\"mobile-toggle\" onClick={() => setMobileToggled(!mobileToggled)} aria-hidden={true}>\n        <FontAwesomeIcon icon={faBars} />\n      </button>\n\n      <nav>\n        <div className=\"nav-items\">\n          {\n            data.site.siteMetadata.namespaces.map(namespace => (\n              <Link to={`/${namespace.key}`} /*className={(document?.location?.pathname?.slice(1).startsWith(namespace.key) ? 'active' : '')} TODO*/>\n                  { namespace.title }\n              </Link>\n            ))\n          }\n        </div>\n      </nav>\n    </header>\n  )\n}","import * as React from 'react';\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport const FrontMatterImage: React.FC<{\n  image: string,\n  icoSize?: SizeProp,\n  width?: number,\n  height?: number,\n  alt?: string,\n}> = props => {\n  if (!props.image) {\n    return null;\n  }\n\n  if (['.svg', '.png', '.jpg', '.jpeg', '.gif'].find(ext => props.image.includes(ext))) {\n    return (\n      <img src={props.image} width={props.width} height={props.height} alt={props.alt}\n        className={props.image.endsWith('#') ? 'one-color' : ''}/>\n    )\n  } else {\n    return (\n      <FontAwesomeIcon icon={(props.image.split('/') as any)} size={props.icoSize}\n                       width={props.width} height={props.height} />\n    )\n  }\n};\n"],"sourceRoot":""}