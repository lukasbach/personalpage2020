{"componentChunkName":"component---src-components-md-page-md-page-tsx","path":"/tools/retypetron","result":{"pageContext":{"slug":"/tools/retypetron","frontmatter":{"slug":"/tools/retypetron","category":"tools","title":"ReTypeTron","description":"Minimalistic React + TypeScript + Electron Boilerplate. Nothing more.","icon":"fab/js-square","iconMonochromatic":null,"tags":"Starter, React, TypeScript, Electron","date":"2020-07-01","sonar":null,"github":{"url":"https://github.com/lukasbach/retypetron","name":"lukasbach/retypetron","issuesUrl":"https://github.com/lukasbach/retypetron/issues","createdAt":"2020-09-09T23:53:21Z","updatedAt":"2022-03-01T18:09:30Z","pushedAt":"2021-04-08T00:17:05Z","issuesCount":0},"website":null,"npm":null,"cli":"git clone https://github.com/lukasbach/retypetron.git","travis":null,"download":null,"actions":null,"attachements":null},"html":"<blockquote>\n<p>Minimalistic React + TypeScript + Electron Boilerplate. Nothing more.</p>\n</blockquote>\n<p>Uses a minimal webpack config to bundle everything together, and includes\njust what you need to build your electron app. Tiny enough so that you keep\na good overview of everything, simple enough for you to add what you need\nand still complete enough to start working on production projects.</p>\n<p><a href=\"https://github.com/lukasbach/retypetron/generate\">Click here</a> to\nstart using the template.</p>\n<p>Features:</p>\n<ul>\n<li>Completely typed, not only your application code, but also the electron\nmain process code, the webpack configuration files (editor suggestions\nin those files make extensions really easy!), and in json configuration\nfiles via json schemas.</li>\n<li>No built-in frontend libraries like <code class=\"language-text\">react-router</code> or <code class=\"language-text\">redux</code>. They\nare dead-simple to integrate manually, this boilerplate does not make\nassumptions about your tech stack.</li>\n<li><code class=\"language-text\">electron-builder</code> included for bundling the app for Windows, Linux\nand Mac. Easily adjustable configurations allows bundling installers or\nzipped portable packages.</li>\n<li><code class=\"language-text\">prettier</code> included for formatting.</li>\n</ul>\n<h2>Removing stuff</h2>\n<p>Utilities like <code class=\"language-text\">electron-builder</code> and <code class=\"language-text\">prettier</code> are included for\nconvenience, but can easily be removed if you don't want them.</p>\n<h3>Removing <code class=\"language-text\">electron-builder</code></h3>\n<ul>\n<li>Remove the fields <code class=\"language-text\">build:unpacked</code>, <code class=\"language-text\">build:packed</code>, <code class=\"language-text\">build</code> from\n<code class=\"language-text\">package.json:scripts</code>.</li>\n<li>Remove the dependency <code class=\"language-text\">electron-builder</code>.</li>\n<li>Remove the file <code class=\"language-text\">electron-builder.json</code>.</li>\n</ul>\n<h3>Removing <code class=\"language-text\">prettier</code></h3>\n<ul>\n<li>Remove the fields <code class=\"language-text\">prettier:check</code> and <code class=\"language-text\">prettier:write</code> from\n<code class=\"language-text\">package.json:scripts</code></li>\n<li>Remove the dependency <code class=\"language-text\">prettier</code>.</li>\n<li>Remove the file <code class=\"language-text\">prettierrc.json</code>.</li>\n</ul>\n<h2>FAQ</h2>\n<ul>\n<li>\n<p>Where does the code land once built?</p>\n<ul>\n<li>The built files <code class=\"language-text\">index.html</code>, <code class=\"language-text\">electron-main.js</code> and\n<code class=\"language-text\">js/main.js</code> (render logic) are placed in the <code class=\"language-text\">app/</code>\nfolder, which is loaded into the root of the\n<code class=\"language-text\">resources/app.asar</code> archive once built into an\ndistributable package.</li>\n</ul>\n</li>\n<li>\n<p>How can I access the location of the built code?</p>\n<ul>\n<li>e.g. <code class=\"language-text\">path.join(app.getAppPath(), &#39;/app/index.html&#39;)</code></li>\n</ul>\n</li>\n<li>\n<p>How can I add other files to be included into that archive?</p>\n<ul>\n<li>Add the file paths as glob to the <code class=\"language-text\">files</code>-array in\n<code class=\"language-text\">electron-builder.json</code>.</li>\n</ul>\n</li>\n<li>\n<p>How can I import images/css/scss/other custom things in\nTypeScript?</p>\n<ul>\n<li>Add the relevant loaders in <code class=\"language-text\">webpack-renderer.config.ts</code>\nif you want to load those files in the render process, or\nin <code class=\"language-text\">webpack-electron.config.ts</code> for the main process.</li>\n</ul>\n</li>\n<li>\n<p>How can I change the icon?</p>\n<ul>\n<li><code class=\"language-text\">resources/icon.png</code></li>\n</ul>\n</li>\n<li>\n<p>I don't want to use yarn.</p>\n<ul>\n<li>Remove the file <code class=\"language-text\">yarn.lock</code>, change <code class=\"language-text\">yarn</code> to <code class=\"language-text\">npm run</code>\nin the scripts inside of <code class=\"language-text\">package.json</code>.</li>\n</ul>\n</li>\n<li>\n<p>I want a more comprehensive boilerplate that includes more features.</p>\n<ul>\n<li>Look into <a href=\"https://github.com/electron-react-boilerplate/electron-react-boilerplate\">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li>\n</ul>\n</li>\n</ul>"}}}