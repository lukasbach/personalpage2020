{"componentChunkName":"component---src-components-md-page-md-page-tsx","path":"/tools/uncomplex","result":{"pageContext":{"slug":"/tools/uncomplex","frontmatter":{"slug":"/tools/uncomplex","category":"tools","title":"Uncomplex","description":"JSON.stringify/parse for complex data structures","icon":"fab/js-square","iconMonochromatic":null,"tags":"NPM Library,No Dependencies,JSON","date":"2020-06-01","sonar":null,"github":{"url":"https://github.com/lukasbach/uncomplex","name":"lukasbach/uncomplex","issuesUrl":"https://github.com/lukasbach/uncomplex/issues","createdAt":"2020-05-31T20:27:51Z","updatedAt":"2020-05-31T23:27:58Z","pushedAt":"2020-05-31T23:27:56Z","issuesCount":0},"website":null,"npm":["uncomplex"],"cli":"npm install uncomplex","travis":"com/lukasbach/uncomplex","download":null,"actions":null,"attachements":null},"html":"<blockquote>\n<p>JSON.stringify/parse for complex data structures</p>\n</blockquote>\n<p>Uncomplex is a library without dependencies for serializing and deserializing JavaScript datastructures\nthat contain complex objects such as class instances. It works be defining so called\n<em>EntityInterfaces</em> that detect whether they are compatible with a specified substructure,\nconvert it when serializing an object and reconvert it when parsing an object.</p>\n<h2>Quick Start</h2>\n<p>Install the package via</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add uncomplex</code></pre></div>\n<p>and call the following methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Uncomplex <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'uncomplex'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> uncomplex <span class=\"token operator\">=</span> Uncomplex<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withEntityInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>entityInterfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stringified<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">stringifyObject</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parsed<span class=\"token operator\">:</span> CustomDataStructure <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>stringified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can define a custom EntityInterface by implementing <code class=\"language-text\">EntityInterface</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UncomplexEntityInterface</span><span class=\"token operator\">&lt;</span>Original <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> Simplified <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">,</span> SimplifyState <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> ParseState <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">=</span> SimplifyState<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  entityId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  applicableClasses<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  isApplicable<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token operator\">:</span> Original</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">simplifyObject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token operator\">:</span> Original<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>SimplifyState<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Simplified<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">parseObject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token operator\">:</span> Simplified<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>ParseState<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Original<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that either <code class=\"language-text\">applicableClasses</code> (specifies a list of classes for which <code class=\"language-text\">instanceof</code> is used\nto determine whether the class can be mapped by the EntityInterface) or <code class=\"language-text\">isApplicable</code> must be\nimplemented.</p>\n<p>Alternatively, the following EntityInterfaces are implemented and can be imported from\nthe uncomplex library:</p>\n<ul>\n<li><code class=\"language-text\">BigIntEntityInterface</code>: Converts <code class=\"language-text\">bigint</code> instances</li>\n<li><code class=\"language-text\">DateEntityInterface</code>: Converts <code class=\"language-text\">Date</code> instances</li>\n<li><code class=\"language-text\">MapEntityInterface</code>: Converts <code class=\"language-text\">Map</code> instances</li>\n<li><code class=\"language-text\">SymbolEntityInterface</code>: Converts <code class=\"language-text\">symbol</code> instances</li>\n</ul>\n<h2>Basic Example</h2>\n<p>The following example can be found at <code class=\"language-text\">examples/customDataStructure.ts</code> and can be run\nvia <code class=\"language-text\">yarn example:customDataStructure</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> param<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> param<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ExampleEntityInterface<span class=\"token operator\">:</span> UncomplexEntityInterface<span class=\"token operator\">&lt;</span>Example<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entityId<span class=\"token operator\">:</span> <span class=\"token string\">'Example'</span><span class=\"token punctuation\">,</span>\n  applicableClasses<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Example<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">simplifyObject</span><span class=\"token operator\">:</span> <span class=\"token parameter\">object</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> object<span class=\"token punctuation\">.</span>param <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">parseObject</span><span class=\"token operator\">:</span> <span class=\"token parameter\">object</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> uncomplex <span class=\"token operator\">=</span> Uncomplex<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withEntityInterfaces</span><span class=\"token punctuation\">(</span>ExampleEntityInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> ex<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> asString <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">stringifyObject</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {\"ex\":{\"p\":\"test\",\"__uncomplexId\":\"Example\"}}</span>\n\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>ex <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">,</span> parsed<span class=\"token punctuation\">.</span>ex<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true 'test'</span></code></pre></div>\n<h2>Example using predefined EntityInterfaces</h2>\n<p>The following example can be found at <code class=\"language-text\">examples/nativeDataStructure.ts</code> and can be run\nvia <code class=\"language-text\">yarn example:nativeDataStructure</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> uncomplex <span class=\"token operator\">=</span> Uncomplex<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withEntityInterfaces</span><span class=\"token punctuation\">(</span>\n  BigIntEntityInterface<span class=\"token punctuation\">,</span> DateEntityInterface<span class=\"token punctuation\">,</span> MapEntityInterface<span class=\"token punctuation\">,</span> SymbolEntityInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bigInt<span class=\"token operator\">:</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999999999999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1800000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> sym1<span class=\"token punctuation\">,</span> sym2<span class=\"token punctuation\">,</span> sym1alt<span class=\"token operator\">:</span> sym1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> asString <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">stringifyObject</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"bigInt\":{\"n\":\"9999999999999\",\"__uncomplexId\":\"BigInt\"},</span>\n<span class=\"token comment\">//   \"date\":{\"iso\":\"2027-01-15T08:00:00.000Z\",\"__uncomplexId\":\"Date\"},</span>\n<span class=\"token comment\">//   \"map\":{\"entries\":[[\"a\",\"aa\"],[\"b\",42]],\"__uncomplexId\":\"Map\"},</span>\n<span class=\"token comment\">//   \"sym1\":{\"id\":0,\"key\":\"a\",\"__uncomplexId\":\"Symbol\"},</span>\n<span class=\"token comment\">//   \"sym2\":{\"id\":1,\"key\":\"b\",\"__uncomplexId\":\"Symbol\"},</span>\n<span class=\"token comment\">//   \"sym1alt\":{\"id\":0,\"key\":\"a\",\"__uncomplexId\":\"Symbol\"}</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> uncomplex<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { bigInt: 9999999999999n,</span>\n<span class=\"token comment\">//   date: 2027-01-15T08:00:00.000Z,</span>\n<span class=\"token comment\">//   map: Map { 'a' => 'aa', 'b' => 42 },</span>\n<span class=\"token comment\">//   sym1: Symbol(a),</span>\n<span class=\"token comment\">//   sym2: Symbol(b),</span>\n<span class=\"token comment\">//   sym1alt: Symbol(a) }</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>sym1 <span class=\"token operator\">===</span> parsed<span class=\"token punctuation\">.</span>sym2<span class=\"token punctuation\">,</span> parsed<span class=\"token punctuation\">.</span>sym1 <span class=\"token operator\">===</span> parsed<span class=\"token punctuation\">.</span>sym1alt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false, true</span></code></pre></div>"}}}