{"componentChunkName":"component---src-components-md-page-md-page-tsx","path":"/tools/ires","result":{"pageContext":{"slug":"/tools/ires","frontmatter":{"slug":"/tools/ires","category":"tools","title":"IRES","description":"A commandline tool for duplicating and resizing image files.","icon":"fas/terminal","iconMonochromatic":null,"tags":"Image Resizing, NPM, CLI, TypeScript","date":"2019-04-21","sonar":null,"github":{"issuesUrl":"https://github.com/lukasbach/ires/issues"},"website":null,"npm":["ires"],"cli":"npx ires -i input.png --sizes 16 32","travis":null,"download":null,"actions":null,"attachements":null},"html":"<p><em>ires</em> (Image resizer) is a commandline tool, which can be used to resize arbitrary\nquantities of images into arbitrary quantities of target image sizes.</p>\n<h2>Installing and running</h2>\n<p> <a href=\"https://nodejs.org/en/download/\">node.js</a> and npm are required for the tool to run.</p>\n<p>To install globally , run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g ires</code></pre></div>\n<p>Then, use the commandline tool <em>ires</em> to process arbitrary quantities\nof images into differently sized image files.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ires -i input.png --sizes 16 32 64</code></pre></div>\n<p>Will create the files</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">input_16.png\ninput_32.png\ninput_64.png</code></pre></div>\n<p>With the respective sizes. </p>\n<h2>Arguments</h2>\n<ul>\n<li>\n<p><em>-i</em>, <em>--input</em> <strong>filenames...</strong></p>\n<p>will use the given paths to files as input files, which will be processed.\nThe image files are separated by spaces.</p>\n<p>Example: <em>--input file1.png file2.png file3.png</em></p>\n</li>\n<li>\n<p><em>--sizes</em> <strong>sizes...</strong></p>\n<p>will use the given image sizes as output image sizes. The sizes are separated\nby spaces and are either an integer, describing both width and height for a square\nimage, or have the format <em>wxh</em>, where <em>w</em> is the width in pixels and <em>h</em> is the\nheight in pixels.</p>\n<p>Example: <em>--sizes 16 32 48x64</em></p>\n</li>\n<li>\n<p><em>-o</em>, <em>--outname</em> <strong>outname</strong></p>\n<p>is the name of the output files. Several placeholders can be used to differentiate\nthe files:</p>\n<ul>\n<li><em>{filename}</em>: The original filename, without the extension.</li>\n<li><em>{extension}</em>: The original fileextension.</li>\n<li><em>{width}</em>: The width of the currently processed size.</li>\n<li><em>{height}</em>: The height of the currently processed size.</li>\n<li><em>{fileindex}</em>: The index of the file currently processed. For example, if files\na.png, b.png, c.png, d.png have been entered as input files and currently file c.png\nis being processed, this placeholder will have the value 2.</li>\n<li><em>{sizeindex}</em>: The index of the size currently processed. For exmaple, if sizes\n16, 32, 64 have been entered as output sizes, and the current file is being resized\nto size 16x16, this placeholder will have the value 0.</li>\n</ul>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ires -i a.png b.png --sizes 10x15 20x25 -o {filename}-{extension}.{fileindex}.{sizeindex}-{width}x{height}</code></pre></div>\n<p>Will render the files:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a-png.0.0-10x15.png\na-png.0.1-20x25.png\nb-png.1.0-10x15.png\nb-png.1.1-20x25.png</code></pre></div>\n</li>\n</ul>"}}}